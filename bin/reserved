#!/usr/bin/python

import os
import sys
import getopt
from sys import stderr
import boto3
import collections

def print_bool(bool_value):
  return 'Yes' if bool_value == True else 'No'

def print_sg(sg_list):
  sg_found = []
  for sg in sg_list:
    sg_found.append(sg['DBSubnetGroupName'])
  return ','.join(sg_found)

# get instance detailed information
def get_ec2_instances_by_type(client):
  instances_list = []
  paginator = client.get_paginator('describe_instances')
  page_iterator = paginator.paginate()
  for page in page_iterator:
    for instances in page.get('Reservations'):
      instances_list = instances_list + instances.get('Instances')

  in_use_list = []
  for instance in instances_list:
    if instance.get('State')['Name'] == 'running':
      in_use_list.append(instance.get('InstanceType'))

  return collections.Counter(in_use_list)


def get_reserved_instances_by_type(client):
  instances_list = client.describe_reserved_instances()

  in_use_list = collections.Counter()
  for instance in instances_list['ReservedInstances']:
    if instance.get('State') == 'active':
      in_use_list[instance.get('InstanceType')] = instance.get('InstanceCount') + in_use_list[instance.get('InstanceType')]

  return in_use_list


def print_summary(in_use, reserved):
  rows = []
  wasted_count = 0
  reservation_count = 0
  inuse_count = 0
  for instance_type, count in in_use.items():
    reserved_count = reserved[instance_type]
    reservation_count += reserved_count
    inuse_count += count
    if (reserved_count - count) > 0:
      wasted = reserved_count - count
      wasted_count += wasted      
    else:
      wasted = 'None'
    rows.append([instance_type, str(count), str(reserved_count), str(wasted)])  

  rows.insert(0, ['Instance type', 'In use', 'Reserved', 'Unused'])
  print_table(rows)
  return (inuse_count, reservation_count, wasted_count)


# print instance info as table
def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print row_format.format(*row)


# parse given parameters
def main(argv):
    region = None
    short = False
    wasted_count = 0
    reserved_count = 0
    inuse_count = 0
    
    try:
      opts, args = getopt.getopt(argv, "r:s")

      for opt, arg in opts:
          if opt in('-r'):
            if arg == 'tokyo':
              region = 'ap-northeast-1'
            elif arg == 'mumbai':
              region = 'ap-south-1'
            elif arg == 'us-east':
              region = 'us-east-1'
            elif arg == 'dublin':
              region = 'eu-west-1'
            elif arg == 'singapore':
              region = 'ap-southeast-1'
            elif arg == 'canada':
              region = 'ca-central-1'
          if opt in ('-s'):
            short = True
    except getopt.GetoptError, err:
      print >>sys.stderr, err
      sys.exit(2)

    if region == None:
      for region_name in ['us-east-1', 'ap-northeast-1', 'eu-west-1', 'ap-southeast-1', 'ca-central-1']:
        print("Region: " + region_name)
        client = boto3.client('ec2', region_name=region_name)    
        summary = print_summary(get_ec2_instances_by_type(client), get_reserved_instances_by_type(client))
        inuse_count += summary[0]        
        reserved_count += summary[1]
        wasted_count += summary[2]
        print("")
    else:
        print("Region: " + region)
        client = boto3.client('ec2', region_name=region)    
        summary = print_summary(get_ec2_instances_by_type(client), get_reserved_instances_by_type(client))
        inuse_count += summary[0]        
        reserved_count += summary[1]
        wasted_count += summary[2]
        print("")        

    if wasted_count > 0:
      sys.exit(wasted_count)

    print("Total: %d in use; %d reserved; %d unused." % (inuse_count, reserved_count, wasted_count))
# run program
if __name__ == "__main__":
    main(sys.argv[1:])
