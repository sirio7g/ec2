#!/usr/bin/env python

import os
import sys
import getopt
from sys import stderr
import boto3


REGIONS = {
  "tokyo": "ap-northeast-1",
  "mumbai": "ap-south-1",
  "us-east": "us-east-1",
  "dublin": "eu-west-1",
  "singapore": "ap-southeast-1",
  "sydney": "ap-southeast-2",  
  "canada": "ca-central-1",
  "oregon": "us-west-2",
  "frankfurt": "eu-central-1",  
  "california": "us-west-1",
  "brazil": "sa-east-1",
  "south-africa": "af-south-1",
  "ohio": "us-east-2",
  "jakarta": "ap-southeast-3",
  "stockholm": "eu-north-1"  
}


def print_bool(bool_value):
  return 'Yes' if bool_value == True else 'No'


def get_volumes(client):
  volumes = []
  paginator = client.get_paginator('describe_volumes')
  page_iterator = paginator.paginate()
  for page in page_iterator:
    volumes = volumes + page['Volumes']

  return volumes


def get_tag(tags, tag_name, default):
  if tags is not None:
    for tag in tags:
      if tag['Key'] == tag_name:
        return tag['Value']
  return default


def get_attached_instance(attachments):
  if attachments is not None:
    for attachment in attachments:
      return attachment['InstanceId'], attachment['Device'], print_bool(attachment['DeleteOnTermination'])


# print instance info as table
def print_table(rows):
  total = 0
  num_of_devices = len(rows) - 1
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    if row[1] is not 'Size':
      total = total + int(row[1])
    print(row_format.format(*row))

  if num_of_devices > 0:
    print("\nFound %s volumes for a total of %s GBs" % (num_of_devices, total))


def print_volumes(volumes_list, short=False):
  rows = []

  for instance in volumes_list:
    if short is False:
      if instance.get('State', None) == 'in-use':
        instance_id, device, dot = get_attached_instance(instance.get('Attachments'))
      else:
        instance_id, device, dot = '', '', ''
      rows.append([
        instance.get('VolumeId'), 
        str(instance.get('Size')), 
        str(instance.get('Iops')),
        instance.get('VolumeType'), 
        instance.get('AvailabilityZone'), 
        instance.get('State'),
        instance_id,
        device,
        dot,
        'Yes' if instance.get('Encrypted') else 'No',
        get_tag(instance.get('Tags'), 'service', '')
        ])

  rows = sorted(rows, key=lambda p: p[0])

  if short is False:
    rows.insert(0, ['VolumeId', 'Size', 'IOPS', 'Type', 'AZ', 'State', 'InstanceId', 'Device', 'Delete on Termination', 'Encrypted', 'Service'])

  return rows


# parse given parameters
def main(argv):
    region = 'us-east-1'
    short = False
    
    try:
      opts, args = getopt.getopt(argv, "r:s")

      for opt, arg in opts:
          if opt in('-r'):
            region = REGIONS.get(arg, "us-east-1")
          if opt in ('-s'):
            short = True
    except getopt.GetoptError as err:
      print(err, file=sys.stderr)
      sys.exit(2)

    print("Region: " + region)
    client = boto3.client('ec2', region_name=region)
    print_table(print_volumes(get_volumes(client), short=short))


# run program
if __name__ == "__main__":
    main(sys.argv[1:])
