#!/usr/bin/env python

import os
import sys
import getopt
from sys import stderr
import boto3

REGIONS = {
  "tokyo": "ap-northeast-1",
  "mumbai": "ap-south-1",
  "us-east": "us-east-1",
  "dublin": "eu-west-1",
  "singapore": "ap-southeast-1",
  "sydney": "ap-southeast-2",  
  "canada": "ca-central-1",
  "oregon": "us-west-2",
  "frankfurt": "eu-central-1",  
  "california": "us-west-1",
  "brazil": "sa-east-1",
  "ohio": "us-east-2"
}

def print_bool(bool_value):
  return 'Yes' if bool_value == True else 'No'


def get_supended_process(processes):
  processes_list = []
  if processes is not None:
    for process in processes:
      processes_list.append(process['ProcessName'])
  return ', '.join(processes_list)


def get_current_instances(instances):
  unhealthy = 0
  if instances is not None:
    for instance in instances:
      if instance['HealthStatus'] == 'Unhealthy':
        unhealthy += 1
    return str(len(instances)) if unhealthy == 0 else "%s (%s unhealthy)" % (len(instances), unhealthy)
  else:
    return '0'


def get_instances(client):
  asgs = []
  paginator = client.get_paginator('describe_auto_scaling_groups')
  page_iterator = paginator.paginate()
  for page in page_iterator:
    asgs = asgs + page['AutoScalingGroups']

  return asgs


# print instance info as table
def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print(row_format.format(*row))


def print_instances(instances_list, short=False):
  rows = []

  for instance in instances_list:
    if short is False:
      rows.append([
        instance.get('AutoScalingGroupName'), 
        get_current_instances(instance.get('Instances')),
        str(instance.get('MinSize')),
        str(instance.get('DesiredCapacity')), 
        str(instance.get('MaxSize')),         
        str(instance.get('DefaultCooldown')), 
        instance.get('HealthCheckType'),
        ','.join(instance.get('AvailabilityZones')),
        get_supended_process(instance.get('SuspendedProcesses', None))
        ])

  rows = sorted(rows, key=lambda p: p[0])

  if short is False:
    rows.insert(0, ['Name', 'Current', 'Min', 'Desired', 'Max', 'Cooldown', 'Healthcheck', 'AZs', 'Sospended'])

  return rows


# parse given parameters
def main(argv):
    region = 'us-east-1'
    short = False
    
    try:
      opts, args = getopt.getopt(argv, "r:s")

      for opt, arg in opts:
          if opt in('-r'):
            region = REGIONS.get(arg, "us-east-1")
          if opt in ('-s'):
            short = True
    except getopt.GetoptError as err:
      print(err, file=sys.stderr)
      sys.exit(2)

    print("Region: " + region)
    client = boto3.client('autoscaling', region_name=region)
    print_table(print_instances(get_instances(client), short=short))


# run program
if __name__ == "__main__":
    main(sys.argv[1:])
