#!/usr/bin/env python

import os
import sys
import getopt
from sys import stderr
import boto3
from botocore.exceptions import ClientError


REGIONS = {
  "tokyo": "ap-northeast-1",
  "mumbai": "ap-south-1",
  "us-east": "us-east-1",
  "dublin": "eu-west-1",
  "singapore": "ap-southeast-1",
  "sydney": "ap-southeast-2",  
  "canada": "ca-central-1",
  "oregon": "us-west-2",
  "frankfurt": "eu-central-1",  
  "california": "us-west-1",
  "brazil": "sa-east-1",
  "south-africa": "af-south-1",
  "ohio": "us-east-2",
  "jakarta": "ap-southeast-3",
  "stockholm": "eu-north-1"  
}

is_descr = False


def get_sgs(client, group_ref=None):
  sgs = []
  sg_ids = []
  sg_names = []

  if group_ref is not None:      
    for ref in group_ref:        
      if ref.startswith('sg-'):
        sg_ids.append(ref)
      else:
        sg_names.append(ref)

  if len(sg_ids) > 0:
    sgs += client.describe_security_groups(DryRun=False, GroupIds=sg_ids)['SecurityGroups']
    
  if len(sg_names) > 0:
    sgs += client.describe_security_groups(DryRun=False, Filters=[{'Name': 'group-name', 'Values': sg_names}])['SecurityGroups']

  if group_ref is None:
    sgs = client.describe_security_groups(DryRun=False)['SecurityGroups']
  
  return sgs


def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print(row_format.format(*row))


def print_sgs(sg_list, header=False):
  rows = []
  
  for sg in sg_list:
    rows.append([
      sg.get('GroupId', ''),
      sg.get('VpcId', ''),
      sg.get('GroupName', '')
    ])
          
  rows = sorted(rows, key=lambda p: p[0])
  rows.insert(0, ['Id','VpcId','Name'])

  return rows


def get_cidr_text(cidr, description):
  if is_descr and description is not None:
    return "%s (%s)" % (cidr, description)
  else:
    return cidr


def print_cidr(rule):
  cidrs = []
  if rule.get('IpRanges'):
    cidrs += [get_cidr_text(cidr['CidrIp'], cidr.get("Description")) for cidr in rule.get('IpRanges')]
  if rule.get('Ipv6Ranges'):
    cidrs += [get_cidr_text(cidr['CidrIpv6'], cidr.get("Description")) for cidr in rule.get('Ipv6Ranges')]
  if rule.get('PrefixListIds'):
    cidrs += [get_cidr_text(cidr['PrefixListId'], cidr.get("Description")) for cidr in rule.get('PrefixListIds')]
  if rule.get('UserIdGroupPairs'):
    cidrs += [get_cidr_text(cidr['GroupId'], cidr.get("Description")) for cidr in rule.get('UserIdGroupPairs')]

  return ", ".join(cidrs)


def print_range(fromPort, toPort):
  if fromPort == None and toPort == None:
    return "All"
  elif fromPort == -1 and toPort == -1:
    return "All"
  elif fromPort == toPort:
    return str(fromPort)
  else:
    return "%d-%d" % (fromPort, toPort)


def print_details(sg):
  in_rows = []
  out_rows = []
  print("GroupId: %s (%s)\nDescription: %s\n" % (sg['GroupId'], sg['GroupName'], sg['Description']))
  
  print("Inbound rules")
  in_rows.append(['Proto', 'Ports', 'Source'])
  for rule in sg.get('IpPermissions'):
    in_rows.append(["All" if rule['IpProtocol'] == "-1" else rule['IpProtocol'], print_range(rule.get('FromPort'), rule.get('ToPort')), print_cidr(rule)])
  print_table(in_rows)

  print("\nOutbound rules")
  out_rows.append(['Proto', 'Ports', 'Destination'])  
  for rule in sg.get('IpPermissionsEgress'):
    out_rows.append(["All" if rule['IpProtocol'] == "-1" else rule['IpProtocol'], print_range(rule.get('FromPort'), rule.get('ToPort')), print_cidr(rule)])
  print_table(out_rows)
  print('')


def main(argv):
    region = 'us-east-1'
    sg_id = None
    header = False
    global is_descr
    
    try:
      opts, args = getopt.getopt(argv, "r:Hs:d", ["region", "with-header", "security-group", "with-description"])

      for opt, arg in opts:
          if opt in('-r', '--region'):
            region = REGIONS.get(arg, "us-east-1")            
          if opt in ('-s', '--security-group'):
            sg_id = arg
          if opt in ('-H', '--with-header'):
            header = True
          if opt in ('-d', '--with-description'):
            is_descr = True
    except getopt.GetoptError as err:
      print(err, file=sys.stderr)
      sys.exit(2)

    client = boto3.client('ec2', region_name=region)

    print("Region: %s" % (region))
    if sg_id:
      sgs = get_sgs(client, sg_id.split(','))
      if len(sgs) > 0:
        for sg in sgs:
          print_details(sg)
    else:
      print_table(print_sgs(get_sgs(client), header=header))


if __name__ == "__main__":
    main(sys.argv[1:])
