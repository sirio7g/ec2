#!/usr/bin/python

import os
import sys
import getopt
from sys import stderr
import boto3
import collections

nf_power = {
  'nano': 0.25,
  'micro':0.5,
  'small':1,
  'medium':2,
  'large':4,
  'xlarge':8,
  '2xlarge':16,
  '3xlarge':24,
  '4xlarge':32,
  '6xlarge':48,
  '8xlarge':64,
  '9xlarge':72,
  '10xlarge':80,
  '12xlarge':96,
  '16xlarge':128,
  '18xlarge':144,
  '24xlarge':192,
  '32xlarge':256,

  'c5.metal':192,
  'i3.metal':128,
  'r5.metal':192,
  'r5d.metal':192,
  'z1d.metal':96,
  'm5.metal':192,
  'm5d.metal':192
}

break_even = {
  'i3': 8.21,
  'c5': 7.60,
  'c5d': 7.54,
  'm5': 7.60,
  'm5d': 7.62,
  'r4': 7.55,
  't3': 7.50,
  't2': 7.41,
  'c4': 8.05
}

nu_cost = {
  'i3': 28.55,
  'c5': 15.555,
  'c5d': 17.568125,
  'm5': 17.57,
  'm5d': 20.68,
  'r4': 24.34,
  't3': 15.22,
  't2': 16.98,
  'c4': 20.13
}

def get_nf(i_class, i_size):
  if i_size == 'metal':
    return nf_power['%s.%s' % (i_class, i_size)]
  else:
    return nf_power[i_size]


def print_values(in_use, reserved):
  if in_use == 0 and reserved == 0:
    return '-'
  else:
    return '%d/%d' % (in_use, reserved)


def get_ec2_instances_by_type(client, tag_name, tag_value):
  in_use = {}
  paginator = client.get_paginator('describe_instances')
  page_iterator = paginator.paginate(Filters=[{'Name':'tag:%s' % tag_name,'Values':['%s' % tag_value]}]) 
  for page in page_iterator:
    for instances in page.get('Reservations'):
      for instance in instances.get('Instances'):        
        if instance.get('State')['Name'] == 'running':
          i_class, i_size = instance.get('InstanceType').split('.')
          if i_class in in_use:
            in_use[i_class][i_size] = in_use[i_class].get(i_size, 0) + 1
            in_use[i_class]['count'] = in_use[i_class].get('count', 0) + 1
          else:
            in_use[i_class] = {i_size: 1, 'NF_used': 0, 'count': 1}
          in_use[i_class]['NF_used'] = in_use[i_class]['NF_used'] + get_nf(i_class, i_size)

  return in_use


def add_reserved_nf_by_class(client, in_use):
  instances_list = client.describe_reserved_instances()
  for instance in instances_list['ReservedInstances']:
    if instance.get('State') == 'active':
        i_class, i_size = instance.get('InstanceType').split('.')
        if i_class in in_use:
          in_use[i_class]['NF_reserved'] = in_use[i_class].get('NF_reserved', 0) + instance.get('InstanceCount') * get_nf(i_class, i_size)          
          in_use[i_class]['r_%s' % i_size] = in_use[i_class].get('r_%s' % i_size, 0) + instance.get('InstanceCount')
        else:
          pass                  

  return in_use


def get_summary(instances, tag_value, region_name):
  rows = []
  for name, sizes in instances.items():    
    rows.append([
      region_name,
      name,
      tag_value,
      str(sizes.get('NF_used', 0)),
      "%0.2f" % (sizes.get('NF_used', 0) * nu_cost[name]),
      "%0.2f" % (sizes.get('NF_used', 0) * (nu_cost[name]*((break_even[name])/12))),
      str(break_even[name])
    ])
  return rows


# print instance info as table
def print_table(rows):
  rows.insert(0, ['Region', 'Class', 'Service', 'NU in use', 'Monthly cost', 'Reserved cost', 'Break even'])
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print row_format.format(*row)


# parse given parameters
def main(argv):
    region = None
    short = False
    instance_count = 0
    inuse_count = 0
    reserved_count = 0
    tag_name = None
    tag_values = None

    
    try:
      opts, args = getopt.getopt(argv, "r:t:")

      for opt, arg in opts:
          if opt in('-r'):
            if arg == 'tokyo':
              region = 'ap-northeast-1'
            elif arg == 'mumbai':
              region = 'ap-south-1'
            elif arg == 'us-east':
              region = 'us-east-1'
            elif arg == 'dublin':
              region = 'eu-west-1'
            elif arg == 'singapore':
              region = 'ap-southeast-1'
            elif arg == 'canada':
              region = 'ca-central-1'
          if opt in ('-t'):
            tag_name, tag_values = arg.split(':')
            tag_values = tag_values.split(',')
    except getopt.GetoptError, err:
      print >>sys.stderr, err
      sys.exit(2)

    if tag_name is None and tag_values is None:
      print('Tag name or values missing')
      print('e.g. -t service:api,ml,machinery')
      sys.exit(2)        

    if region == None:
      for region_name in ['us-east-1', 'ap-northeast-1', 'eu-west-1', 'ap-southeast-1', 'ca-central-1']:
        print("Region: " + region_name)
        client = boto3.client('ec2', region_name=region_name)
        rows = []
        for tag_value in tag_values:
          rows += get_summary(get_ec2_instances_by_type(client, tag_name, tag_value), tag_value, region_name)
        print_table(rows)
    else:
        print("Region: " + region)
        client = boto3.client('ec2', region_name=region)    
        rows = []
        for tag_value in tag_values:
          rows += get_summary(get_ec2_instances_by_type(client, tag_name, tag_value), tag_value, region)
        print_table(rows)


# run program
if __name__ == "__main__":
    main(sys.argv[1:])
