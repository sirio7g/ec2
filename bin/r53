#!/usr/bin/python

import os
import sys
import getopt
from sys import stderr
import boto3

def get_hosted_zone_id(client, domain):
  ids = []
  response = client.list_hosted_zones_by_name()
  for hosted_zone in response['HostedZones']:
    if hosted_zone['Name'] == domain:
      print('Hosted Zone: %s' % (hosted_zone['Name']))
      ids.append(hosted_zone['Id'])
      return ids

def print_bool(bool_value):
  return 'Yes' if bool_value == True else 'No'

def print_resource_records(resource_records):
  rset_list = []
  if resource_records.get('ResourceRecords') != None:
    for record in resource_records['ResourceRecords']:
      rset_list.append(record['Value'])
  elif resource_records.get('AliasTarget') != None:
      rset_list.append('(ALIAS: %s) %s' % (resource_records['AliasTarget']['HostedZoneId'], resource_records['AliasTarget']['DNSName']))
  else:
    pass
  
  return ', '.join(rset_list)

# get instance detailed information
def get_recordset_instances(client, hosted_zone_ids):
  rset = []
  for hosted_zone in hosted_zone_ids:
    paginator = client.get_paginator('list_resource_record_sets')
    operation_parameters = {'HostedZoneId': hosted_zone }
    page_iterator = paginator.paginate(**operation_parameters)
    for page in page_iterator:
        rset = rset + page['ResourceRecordSets']

  return rset

# print instance info as table
def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print row_format.format(*row)

def print_recordset(rset, short=False):
  rows = []
  
  for record in rset:
    rows.append([
      record['Name'], 
      record['Type'],
      str(record.get('TTL', 'n/a')), 
      print_resource_records(record)      
      ])
  rows = sorted(rows, key=lambda p: p[0])
  rows.insert(0, ['Name', 'Type', 'TTL', 'RSet'])
  return rows

# parse given parameters
def main(argv):
    domain = None

    try:
      opts, args = getopt.getopt(argv, "d:")

      for opt, arg in opts:
          if opt in('-d'):
            domain = arg
    except getopt.GetoptError, err:
      print >>sys.stderr, err
      sys.exit(2)

    if domain is not None:
      client = boto3.client('route53')
      print_table(print_recordset(get_recordset_instances(client, get_hosted_zone_id(client, domain + '.'))))
    else:
      print('Please specify a domain name, e.g. r53 -d example.com')


# run program
if __name__ == "__main__":
    main(sys.argv[1:])
