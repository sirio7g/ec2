#!/usr/bin/env python

import os
import sys
import boto3
import time
import pytz
from datetime import date, datetime
import argparse
import hashlib
import json
import re
from tabulate import tabulate
import concurrent.futures as futures


REGIONS = {
  "tokyo": "ap-northeast-1",
  "mumbai": "ap-south-1",
  "us-east": "us-east-1",
  "dublin": "eu-west-1",
  "singapore": "ap-southeast-1",
  "sydney": "ap-southeast-2",  
  "canada": "ca-central-1",
  "oregon": "us-west-2",
  "frankfurt": "eu-central-1",  
  "california": "us-west-1",
  "brazil": "sa-east-1",
  "south-africa": "af-south-1",
  "ohio": "us-east-2"  
}

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[32m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def withcolor(text, from_text=None):
  if text is None:
    return text

  if from_text is None:
    from_text = text

  if from_text in ('Remove', 'True', 'FAILED', 'CREATE_FAILED', 'DELETE_FAILED', 'UPDATE_FAILED', 'UPDATE_ROLLBACK_COMPLETE'):
    return bcolors.FAIL + text + bcolors.ENDC
  elif from_text in ('Conditional', 'DELETE_SKIPPED'):
    return bcolors.WARNING + text + bcolors.ENDC
  elif from_text in ('CREATE_COMPLETE', 'DELETE_COMPLETE', 'UPDATE_COMPLETE'):
    return bcolors.OKGREEN + text + bcolors.ENDC
  else:
    return text


def prompt_confirmation(message, hard_stop=True):
  answer = None
  while answer not in ("yes", "no"):
      answer = input(message + " [Y/N]: ")
      if answer in ["yes", "y", "Y"]:
          return True
      elif answer in ["no", "n", "NO"]:
          if hard_stop:
              print("Aborting script!")				
              sys.exit(1)
          else:
              return False
      else:
          print("Please enter 'yes/y/Y' or 'no/n/N'.")


def generate_tags(template_version, template_file):
  return [{'template_version': template_version}, {'template_file': template_file}]


def get_bucket_name():
  response = boto3.client("sts").get_caller_identity()
  return "cloudformation_tmp_%s_%s" % (response["Account"], response["Arn"].split("/")[-1:][0])


def put_template_file(region, stack_name, template_file):
  s3 = boto3.client('s3', region_name=region)
  bucket_name = get_bucket_name()
  filename = "tmp_template/%s/%s_%s" % (date.today().strftime("%Y_%m_%d"), stack_name, time.time())
  with open(template_file, "rb") as f:
    s3.upload_fileobj(f, bucket_name, filename)
  return "s3://%s/%s" % (bucket_name, filename)


def wait_for_status(client, change_set_name, stack_name, status_type = 'Status', polling_interval=3):
  region = client.meta.region_name
  proceed = True
  response = None
  iteration = 0
  while True:
    try:
      response = client.describe_change_set(
          ChangeSetName = change_set_name,
          StackName= stack_name
      )
    except client.exceptions.ChangeSetNotFoundException as e:
      if iteration >= 2:
        break
      else:
        iteration += 1
        continue
    except ClientError as e:
      print("Unexpected error: %s" % e)
      sys.exit(1)

    status = response.get(status_type)
    if status in ('EXECUTE_IN_PROGRESS', 'CREATE_PENDING', 'CREATE_IN_PROGRESS'):
      print(f"[Region: {region}, Stack: {stack_name}] Current status: {response.get(status_type)}. Waiting ...")
      time.sleep(polling_interval)
    elif status in ('FAILED', 'EXECUTE_FAILED', 'OBSOLETE'):
      proceed = False
      print(f"[Region: {region}, Stack: {stack_name}] Status: {withcolor(response.get(status_type))}. Reason: {response.get('StatusReason')}")
      break     
    else:
      print(f"[Region: {region}, Stack: {stack_name}] Status: {withcolor(response.get(status_type))}. Reason: {response.get('StatusReason')}")
      break
  return proceed


def wait_for_stack_status(client, stack_name, client_token, polling_interval=3):
  response = None
  last_event_ts = datetime(1970, 1, 1, 0, 0, 0, tzinfo=pytz.utc)
  event_nr = 1
  status = None
  resource_type = None
  print('Events:')
  while not (status in ('UPDATE_ROLLBACK_COMPLETE', 'UPDATE_COMPLETE', 'CREATE_COMPLETE') and resource_type == "AWS::CloudFormation::Stack"):
    paginator = client.get_paginator('describe_stack_events')
    page_iterator = paginator.paginate(StackName = stack_name)
    last_event_ts_session = None
    events = []
    for page in page_iterator:
      for event in page['StackEvents']:
        if event.get('ClientRequestToken') == client_token:          
          if last_event_ts_session is None:
            last_event_ts_session = event['Timestamp']
            status = event.get('ResourceStatus')
            resource_type = event.get('ResourceType')

          if event['Timestamp'] > last_event_ts:
            events.insert(0, "\tTimestamp: %s\n\tResourceStatus: %s\n\tResourceType: %s\n\tLogicalResourceId: %s\n\tPhysicalResourceId: %s\n\tReason: %s\n" % 
              (event.get('Timestamp').strftime("%H:%M:%S"), 
                withcolor(event.get('ResourceStatus')), 
                event.get('ResourceType'), 
                event.get('LogicalResourceId'), 
                event.get('PhysicalResourceId'), 
                withcolor(event.get('ResourceStatusReason'), event.get('ResourceStatus'))
                )
              )

    last_event_ts = last_event_ts_session
    #flush array
    for string in events:
      print("\t#%d" % (event_nr))
      print(string)
      event_nr += 1
    time.sleep(polling_interval)


def build_params(existing_params, new_params, user_provided_params):
  params_list = []
  for param in new_params:
    found = False
    param_key = param.get('ParameterKey')
    for param_to_find in existing_params:
      if param_to_find.get('ParameterKey') == param_key:
        params_list.append({"ParameterKey" : param.get('ParameterKey'), "UsePreviousValue": True})
        found = True
        break
    if not found:
      default_value = param.get('DefaultValue')
      if default_value is not None:
        params_list.append({"ParameterKey" : param_key, "ParameterValue": default_value})
      else:
        params_list.append({"ParameterKey" : param_key, "ParameterValue": ""})

  upsert_params(params_list, user_provided_params)
  return params_list


def create_change_set(client, stack_name, template_file, bucket_name, region, params, capabilities, user_provided_params):
  change_set_name = "%s-%s" % (stack_name, int(time.time()))
  if bucket_name is not None:
    obj_name = upload_file_to_s3(region, bucket_name, template_file)
    client.create_change_set(
      StackName = stack_name,
      TemplateURL= f"https://s3.amazonaws.com/{bucket_name}/{obj_name}",
      ChangeSetName = change_set_name,
      ChangeSetType = 'UPDATE',
      Parameters = build_params(get_stacks_params_by_name(client, stack_name), params, user_provided_params),
      Capabilities = [] if capabilities is None else capabilities
    )
  else:
    client.create_change_set(
      StackName = stack_name,
      TemplateBody = get_file_as_string(template_file),
      ChangeSetName = change_set_name,
      ChangeSetType = 'UPDATE',
      Parameters = build_params(get_stacks_params_by_name(client, stack_name), params, user_provided_params),
      Capabilities = [] if capabilities is None else capabilities
    )
  print(f"[Region: {region}, Stack: {stack_name}] Created change set: {change_set_name}")
  
  if wait_for_status(client, change_set_name, stack_name):
    return change_set_name
  else:
    return None  


def update_change_set(client, change_set_name, stack_name):
  client_token = "Event-%s-%s" % (int(time.time()), change_set_name)
  print("Updating change set '%s' for stack '%s' ..." % (change_set_name, stack_name))
  response = client.execute_change_set(
      ChangeSetName = change_set_name,
      StackName = stack_name,
      ClientRequestToken = client_token
  )
  return client_token


def delete_change_set(client, change_set_name, stack_name):
  print("Cleaning up change set '%s'" % change_set_name)

  response = client.delete_change_set(
      ChangeSetName = change_set_name,
      StackName = stack_name
  )


def print_change_set(client, change_set_name, stack_name):
  response = client.describe_change_set(
      ChangeSetName = change_set_name,
      StackName= stack_name
  )  

  print("\nChanges:")
  for change in response['Changes']:
    resource = change['ResourceChange']
    print("\tAction: %s\n\tReplacement: %s\n\tResourceType: %s\n\tLogicalResourceId: %s\n\tPhysicalResourceId: %s\n\t"
      % (withcolor(resource.get('Action')), withcolor(resource.get('Replacement')), resource.get('ResourceType'), resource.get('LogicalResourceId'), resource.get('PhysicalResourceId')))


def print_status(status, reason):
  if reason == None:
    return status
  else:
    return "%s (%s)" % (status, reason)


def get_file_as_string(template_file):
  data = None
  with open(template_file, 'r') as myfile:
    data = myfile.read()  
  return data


def print_template(params, capabilities):
  print('\nParameters:\n')
  for param in params:
    print("\t%s: %s\n\t%s\n" % (param.get('ParameterKey'), param.get('DefaultValue') if param.get('DefaultValue') is not None else '', param.get('Description')))

  if capabilities is not None:
    print("\nRequired capabilities:\n")
    for capability in capabilities:
      print('\t%s\n' % (capability))


def upload_file_to_s3(region, bucket_name, filename):
    object_name = hashlib.sha1(bytes("%s%s" % (filename, time.time()), "utf-8")).hexdigest()
    client_s3 = boto3.client("s3", region_name=region)
    client_s3.upload_file(filename, bucket_name, f"cf-templates/{object_name}")
    print(f"Copied file over to S3: https://s3.amazonaws.com/{bucket_name}/{object_name}")
    return f"cf-templates/{object_name}"


def validate_template(client, template_file, bucket_name, region):
  if bucket_name is not None:
    obj_name = upload_file_to_s3(region, bucket_name, template_file)
    template = client.validate_template(TemplateURL=f"https://s3.amazonaws.com/{bucket_name}/{obj_name}")    
  else:
    template = client.validate_template(TemplateBody = get_file_as_string(template_file))
  return template.get('Parameters'), template.get('Capabilities') 


def get_stacks(client):
  stacks = []
  paginator = client.get_paginator('describe_stacks')
  page_iterator = paginator.paginate()
  for page in page_iterator:
      stacks = stacks + page['Stacks']

  return stacks


def get_stacks_params_by_name(client, stack_name):
  response = client.describe_stacks(StackName = stack_name)
  for stack in response['Stacks']:
    return stack['Parameters']


def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print(row_format.format(*row))


def print_stacks(rset, short=False):
  rows = []
  
  for record in rset:
    rows.append([
      record['StackName'], 
      record['Description'].replace("\n", " ") if record.get('Description') else 'N/A',
      print_status(record.get('StackStatus'), record.get('StackStatusReason')),
      record['CreationTime'].strftime("%d/%m/%Y %H:%M:%S"),
      record['LastUpdatedTime'].strftime("%d/%m/%Y %H:%M:%S") if record.get('LastUpdatedTime') else 'N/A'
      ])
  rows = sorted(rows, key=lambda p: p[0])
  rows.insert(0, ['Region', 'Name', 'Description', 'Status', 'Created', 'Updated'])
  return rows


def print_change_set_params(client, change_set_name, stack_name):
  response = client.describe_change_set(
      ChangeSetName=change_set_name,
      StackName=stack_name
  )
  print("\nParameters:")
  rows = [["\tKey", "Value"]]
  for param in sorted(response["Parameters"], key = lambda i: i['ParameterKey']):
    rows.append(["\t%s" % (param["ParameterKey"]), param["ParameterValue"]])
  print_table(rows)


def upsert_params(params_list, new_params):
  if new_params is not None and len(new_params) > 0:
    for param in new_params.split(","):
      k, v = param.split("=")
      found = False
      for existing_param in params_list:
        if existing_param["ParameterKey"] == k:
          existing_param["ParameterValue"] = v
          existing_param["UsePreviousValue"] = False
          found = True
      if not found:
        params_list.append({"ParameterKey": k, "ParameterValue": v, "UsePreviousValue": False})


def update(client, stack_name, template_file, bucket_name, user_provided_params, region, apply_immediately=True):
  params, capabilities = validate_template(client, template_file, bucket_name, region)
  change_set_name = create_change_set(client, stack_name, template_file, bucket_name, region, params, capabilities, user_provided_params) # wait for change set to be ready
  if apply_immediately:
    apply_change_set(client, stack_name, change_set_name)
    return
  return (client, stack_name, change_set_name)
  

def apply_change_set(client, stack_name, change_set_name):
    print(f"Applying change set for stack \"{stack_name}\"")
    print_change_set_params(client, change_set_name, stack_name)
    print_change_set(client, change_set_name, stack_name)
    if prompt_confirmation("Do you want to update the stack? ", hard_stop=False):
      client_token = update_change_set(client, change_set_name, stack_name)
      wait_for_stack_status(client, stack_name, client_token)
      return
    delete_change_set(client, change_set_name, stack_name)  


def create_bulk_change_set(matching_stacks, template_file, bucket_names, user_provided_params):
  regional_buckets = dict(map(lambda b: b.split("="), bucket_names.split(",")))
  aws_regions = {v: k for k, v in REGIONS.items()}

  results = []
  with futures.ThreadPoolExecutor() as pool:  
    for stack in matching_stacks:
      stack_name = stack["StackName"]
      region = stack["StackId"].split(":")[3]
      print(f"Creating change set for the following stack \"{stack_name}\" in region \"{region}\" ...")
      results.append(
        pool.submit(
          update, 
          get_client(region), 
          stack_name, 
          template_file, 
          regional_buckets.get(region) if regional_buckets.get(region, None) else regional_buckets.get(aws_regions.get(region), None), 
          user_provided_params, 
          region,
          apply_immediately=False
        )
      )

  i = 0
  for result in results:
    change_set_name = result.result()
    if change_set_name[2] is not None:
      i += 1
      apply_change_set(change_set_name[0], change_set_name[1], change_set_name[2])
  
  if i == 0:
    print("Nothing to execute. Aborting script")


def bulk_update(stack_name, template_file, bucket_names, user_provided_params, regions):
  results = []
  with futures.ThreadPoolExecutor() as pool:  
    for region in regions:
      results.append(
        pool.submit(get_stacks, get_client(REGIONS.get(region)))
      )

  matching_stacks = []
  pattern = re.compile(stack_name)
  for result in results:
    stacks = result.result()
    if stacks:
      for stack in stacks:
        if pattern.match(stack['StackName']):
          matching_stacks.append(stack)

  if matching_stacks:
    print("The following stacks have been found:")
    print_table(print_stacks(matching_stacks))
  else:
    print("No stacks found.")
    return

  if prompt_confirmation("Do you want to create the changes for the above stacks? "):
    create_bulk_change_set(matching_stacks, template_file, bucket_names, user_provided_params)


def build_change_set(client, stack_name, template_file, bucket_name, user_provided_params, region):
  params, capabilities = validate_template(client, template_file, bucket_name, region)
  change_set_name = create_change_set(client, stack_name, template_file, bucket_name, region, params, capabilities, user_provided_params)
  return params, capabilities, change_set_name


def diff(client, stack_name, local_file):
  response = client.get_template(
      StackName=stack_name,
      TemplateStage='Original'
  )

  tmp_filename = "/tmp/remote_%s_%s" % (stack_name, time.time())
  
  try:
    f = open(tmp_filename, "w")
    f.write(response["TemplateBody"])
  finally:
    if f:
      f.close()
  
  os.system("vimdiff -RZ %s %s" % (tmp_filename, local_file))


def parameters(client, stack_name, as_file=None):
  rows = [["Key", "Value"]]    
  for param in sorted(get_stacks_params_by_name(client, stack_name), key = lambda i: i['ParameterKey']) :
    rows.append([param["ParameterKey"], param["ParameterValue"]])
    
  print(tabulate(rows, ["Parameter Name", "Parameter Value"], tablefmt="plain"))

  if as_file is not None:
    with open(as_file, 'w', encoding='utf-8') as f:
      json.dump(sorted(get_stacks_params_by_name(client, stack_name), key = lambda i: i['ParameterKey']), f, ensure_ascii=False, indent=4)
    print(f"\nGenerated file: {as_file}")
    print(f"e.g. \"aws cloudformation create-stack --stack-name test-local-stack --template-body file://template.json --parameters file://{as_file}\"")


def clone(client, stack_name, template_file):
  params = []
  for param in sorted(get_stacks_params_by_name(client, stack_name), key = lambda i: i['ParameterKey']) :
    params.append("ParameterKey=%s,ParameterValue=%s" % (param["ParameterKey"], param["ParameterValue"]))
  print("aws cloudformation create-stack --stack-name %s /" % stack_name)
  print("--template-body %s /" % template_file)
  print("--parameter %s" % " /\n".join(params))


def download(client, stack_name):
  if stack_name == None:
    sys.exit("Missing stack name")
  response = client.get_template(
      StackName=stack_name,
      TemplateStage='Original'
  )

  tmp_filename = "/tmp/%s_%s.yml" % (stack_name, time.time())
  
  try:
    f = open(tmp_filename, "w")
    f.write(response["TemplateBody"])
    print(f"Downloaded template file {tmp_filename}")
  finally:
    if f:
      f.close()
  
  return tmp_filename


def print_all_params(client):
  rows = []
  for stack in get_stacks(client):
    if stack.get("Parameters") is not None:
      for param in sorted(stack['Parameters'], key = lambda i: i['ParameterKey']) :
          rows.append([stack['StackName'], param["ParameterKey"], param["ParameterValue"]])    

  print(tabulate(rows, ["Stack name", "Param Name", "Param Value"], tablefmt="plain"))


def get_client(region):
  return boto3.client('cloudformation', region_name=region)  


def load_config(filename):
  with open (filename, "r") as f:
    data = json.loads(f.read())  
  return data


def main(argv):
  parser = argparse.ArgumentParser(
          description="AWS CloudFormation command-line helper.",
          formatter_class=argparse.ArgumentDefaultsHelpFormatter,
  )
  parser.add_argument("-r", "--region", default="us-east-1", help="AWS region ID", required=False)
  parser.add_argument("-c", "--config", default=None, help="Configuration file", required=False)
  subparsers = parser.add_subparsers(dest="command_name", help="Available commands")

  parser_validate = subparsers.add_parser("validate", help="Validate local template file")
  parser_validate.add_argument("template_file", default=None, help="Full path of the local CF's template file to compare")
  parser_validate.add_argument("-b", "--bucket-name", default=None, help="If bucket name is provided the file will store in S3 (required for large template)")

  parser_diff = subparsers.add_parser("diff", help="Compare local template file with the current version loaded into CloudFormation")
  parser_diff.add_argument("stack_name", default=None, help="The name of the existing stack")
  parser_diff.add_argument("template_file", default=None, help="Full path of the local CF's template file to compare")

  parser_update = subparsers.add_parser("update", help="Update template")
  parser_update.add_argument("stack_name", default=None, help="The name of the existing stack")
  parser_update.add_argument("template_file", default=None, help="Full path of the local CF's template file to compare")
  parser_update.add_argument("-p", "--params", default=None, help="Comma separated key value params e.g. Key=Value,Key2=Value2. Those will be added to the existing ones", required=False)
  parser_update.add_argument("-b", "--bucket-name", default=None, help="If bucket name is provided the file will store in S3 (required for large template)")

  parser_bulk_update = subparsers.add_parser("bulk-update", help="Update template")
  parser_bulk_update.add_argument("stack_name", default=None, help="The name of the existing stack")
  parser_bulk_update.add_argument("template_file", default=None, help="Full path of the local CF's template file to compare")
  parser_bulk_update.add_argument("-p", "--params", default=None, help="Comma separated key value params e.g. Key=Value,Key2=Value2. Those will be added to the existing ones", required=False)
  parser_bulk_update.add_argument("-b", "--bucket-names", default=None, help="Comma separated key value params of regional S3 buckets e.g. us-east=cf-bucket-us-east,singapore=cf-bucket-singapore.", required=True)

  parser_getparams = subparsers.add_parser("params", help="List stack parameters")
  parser_getparams.add_argument("stack_name", default=None, help="The name of the existing stack")
  parser_getparams.add_argument("-f", "--to-file", default=None, help="Print params list into a given filename (format used by aws cli)", required=False)

  parser_clone = subparsers.add_parser("clone", help="Clone existing stack")
  parser_clone.add_argument("stack_name", default=None, help="The name of the existing stack")
  parser_clone.add_argument("template_file", default=None, help="Full path of the local CF's template file to compare")

  parser_download = subparsers.add_parser("download", help="Download template of a given stack")
  parser_download.add_argument("stack_name", default=None, help="The name of the existing stack")

  parser_print_all = subparsers.add_parser("print-all-params", help="Print all params for all stacks in the given region (to use in combination with 'grep')")

  subparsers.add_parser("list", help="List CloudFormation stacks")

  args = parser.parse_args()

  if args.region == "all":
    regions = REGIONS.keys()
  else:
    regions = [args.region]

  if args.config is not None:
    CONFIG = load_config(args.config)
    print(CONFIG)

  if args.command_name == "bulk-update":
    bulk_update(args.stack_name, args.template_file, args.bucket_names, args.params, regions)
  else:
    for region_name in regions:
      region = REGIONS.get(region_name, region_name)

      print("Region: " + region)
      client = get_client(region)

      if args.command_name == "validate":
        params, capabilities = validate_template(client, args.template_file, args.bucket_name, region)
        print_template(params, capabilities)
      elif args.command_name == "update":
        update(client, args.stack_name, args.template_file, args.bucket_name, args.params, region)
        print("Goodbye")
      elif args.command_name == "diff":
        diff(client, args.stack_name, args.template_file)
      elif args.command_name == "params":
        parameters(client, args.stack_name, args.to_file)
      elif args.command_name == "clone":
        clone(client, args.stack_name, args.template_file)
      elif args.command_name == "download":
        download(client, args.stack_name)
      elif args.command_name == "print-all-params":
        print_all_params(client)
      else:
        print_table(print_stacks(get_stacks(client)))

if __name__ == "__main__":
  main(sys.argv[1:])
