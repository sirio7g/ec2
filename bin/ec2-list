#!/usr/bin/env python

import os
import sys
import getopt
from sys import stderr
import boto3
import dateutil.parser
import calendar
import time
import datetime


REGIONS = {
  "tokyo": "ap-northeast-1",
  "mumbai": "ap-south-1",
  "us-east": "us-east-1",
  "dublin": "eu-west-1",
  "singapore": "ap-southeast-1",
  "sydney": "ap-southeast-2",  
  "canada": "ca-central-1",
  "oregon": "us-west-2",
  "frankfurt": "eu-central-1",  
  "california": "us-west-1",
  "brazil": "sa-east-1",
  "south-africa": "af-south-1",
  "ohio": "us-east-2"
}


def print_bool(bool_value):
  return 'Yes' if bool_value == True else 'No'


def get_tags(tags, tag_names):
  if tags is None:
    return None

  values = {key:'<None>' for key in tag_names}
  for tag in tags:
    if tag['Key'] in tag_names:
      values[tag['Key']] = tag['Value']
  
  if len(tag_names) > 0:
    ordered_values = []
    for tag_name in tag_names:
      ordered_values.append(values.get(tag_name, '<None>'))
    return ','.join(ordered_values)
  else:
    return None


def get_tags_from_filter(filters):
  tags_filters = []
  if filters is not None and "=" in filters:
    for tag in filters.split(","):
      tag_name, tag_value = tuple(tag.split("="))
      tags_filters.append({"Name": "tag:%s" % (tag_name), "Values":[tag_value]})
  return tags_filters


def print_sg(sgs):
  sg_list = []
  for sg in sgs:
    sg_list.append(sg['GroupId'])
  return ', '.join(sg_list)


def get_uptime(launch_time):
  elapsed_time = int(time.time() - calendar.timegm(launch_time.timetuple()))
  if elapsed_time > 604800: #a week
    return str(datetime.timedelta(seconds=elapsed_time)).split(',')[0]
  else:
    return str(datetime.timedelta(seconds=elapsed_time))


def get_instances(client, filters):
  instance_list = []
  paginator = client.get_paginator('describe_instances')
  page_iterator = paginator.paginate(Filters=get_tags_from_filter(filters))
  for page in page_iterator:
    for reservations in page['Reservations']:
      instance_list = instance_list + reservations['Instances']
  return instance_list


def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print(row_format.format(*row))


def print_instances(instances_list, short=False, header=False, tags=[], filters=None, with_region=True):
  rows = []
  
  for instance in instances_list:
    if instance['State']['Name'] == "running":
        instance_name_or_id = get_tags(instance.get('Tags'), ['Name'])
        instance_name = instance_name_or_id if instance_name_or_id is not None else instance.get('InstanceId')
        if filters is not None and filters not in instance_name:
          continue        
        service_name = get_tags(instance.get('Tags'), tags)
        public_ip = instance.get('PublicIpAddress', 'n/a')
        public_dns = instance.get('PublicDnsName', public_ip)        
        
        if instance.get('SpotInstanceRequestId') is None:
          spot_instance = 'Normal'
        else:
          spot_instance = 'Spot'
        
        if instance_name == None or instance_name == '' or instance_name == '<None>':
          instance_name = instance.get('InstanceId')
        
        if service_name == None or service_name == '':
          service_name = ''

        if public_dns == None or public_dns == '':
          public_dns = public_ip

        if short:
          row = [
            str(instance['Placement']['AvailabilityZone'])[:-1],
            instance_name, 
            instance.get('InstanceId'), 
            instance.get('PrivateIpAddress'), 
            public_ip, 
            instance.get('InstanceType'), 
            str(instance['Placement']['AvailabilityZone'])]
        else:
          row = [
            str(instance['Placement']['AvailabilityZone'])[:-1],
            instance_name, 
            public_dns, 
            instance.get('InstanceId'), 
            instance.get('PrivateIpAddress'), 
            public_ip, 
            instance.get('InstanceType'), 
            str(instance['Placement']['AvailabilityZone']), 
            instance.get('ImageId'), 
            spot_instance, 
            print_sg(instance['SecurityGroups']), 
            get_uptime(instance.get('LaunchTime')), 
            service_name]

        if with_region:
          rows.append(row)
        else:
          rows.append(row[1:])

  rows = sorted(rows, key=lambda p: (p[0], p[1]))

  if header is True:
    if short is True:
      head = ['Name', 'Id', 'Private IPv4','Public IPv4','Type','Az']
      if with_region:
        head.insert(0, "Region")
      rows.insert(0, head)
    else:      
      head = ['Name','Hostname','Id','Private IPv4','Public IPv4','Type','Az','AMI','Price','SG(s)', 'Uptime', 'Tags (' + ','.join(tags) + ')']
      if with_region:
        head.insert(0, "Region")
      rows.insert(0, head)

  return rows


def main(argv):
    region = None
    short = False
    header = False
    with_region = False
    tags=['service', 'Product', 'Scope']
    filters=None
    
    try:
      opts, args = getopt.getopt(argv, "r:HRst:f:", ["region=", "with-header", "with-region", "short", 'tags=', 'filter='])

      for opt, arg in opts:
          if opt in ('-r', '--region'):
            region = arg
          if opt in ('-s', '--short'):
            short = True
          if opt in ('-H', '--with-header'):
            header = True
          if opt in ('-R', '--with-region'):
            with_region = True
          if opt in ('-t', '--tags'):
            tags = arg.split(',')
          if opt in ('-f', '--filter'):
            filters = arg
    except getopt.GetoptError as err:
      print(err, file=sys.stderr)
      sys.exit(2)

    instances = []
    if region is None:
      instances = get_instances(boto3.client('ec2', region_name="us-east-1"), filters)
    else:
      if region == "all":
        with_region = True
        for alias, aws_region in REGIONS.items():
          instances += get_instances(boto3.client('ec2', region_name=aws_region), filters)
      elif ',' in region:
        with_region = True
        for aws_region in region.split(","):
          instances += get_instances(boto3.client('ec2', region_name=REGIONS.get(aws_region, aws_region)), filters)
      else:
        instances = get_instances(boto3.client('ec2', region_name=REGIONS.get(region, region)), filters)

    print_table(print_instances(instances, short=short, header=header, tags=tags, filters=filters, with_region=with_region))

if __name__ == "__main__":
    main(sys.argv[1:])
