#!/usr/bin/env python

import os
import sys
import getopt
from sys import stderr
import boto3


REGIONS = {
  "tokyo": "ap-northeast-1",
  "mumbai": "ap-south-1",
  "us-east": "us-east-1",
  "dublin": "eu-west-1",
  "singapore": "ap-southeast-1",
  "sydney": "ap-southeast-2",  
  "canada": "ca-central-1",
  "oregon": "us-west-2",
  "frankfurt": "eu-central-1",  
  "california": "us-west-1",
  "brazil": "sa-east-1"
}


def print_bool(bool_value):
  return 'Yes' if bool_value == True else 'No'


def print_sg(sg_list):
  sg_found = []
  for sg in sg_list:
    sg_found.append(sg['DBSubnetGroupName'])
  return ','.join(sg_found)


def print_vpc_sgs(vpc_sgs):
  sg_found = []
  for sg in vpc_sgs:
    sg_found.append(sg['VpcSecurityGroupId'])
  return ','.join(sg_found)	


def get_rds_instances(client):
  instances_list = []
  paginator = client.get_paginator('describe_db_instances')
  page_iterator = paginator.paginate()
  for page in page_iterator:
    instances_list = instances_list + page['DBInstances']
  
  return instances_list


def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print(row_format.format(*row))


def print_instances(instances_list, short=False, summary=False):
  rows = []
  sum_storage = 0
  sum_instances = 0
  
  for instance in instances_list:
    sum_storage += instance['AllocatedStorage']*2 if instance['MultiAZ'] else instance['AllocatedStorage']
    sum_instances += 2 if instance['MultiAZ'] else 1
    if short is False:
      rows.append([
        instance['DBInstanceIdentifier'], 
        instance['DBSubnetGroup']['DBSubnetGroupName'],
        instance['DBInstanceClass'], 
        '%s GB' % instance['AllocatedStorage'],
        '%s %s' % (instance['Engine'], instance['EngineVersion']), 
        instance['DBInstanceStatus'],
        instance['AvailabilityZone'] if instance['MultiAZ'] is False else ', '.join([instance['AvailabilityZone'], instance['SecondaryAvailabilityZone']]),
        print_bool(instance['MultiAZ']),
        print_bool(instance['StorageEncrypted']),
        instance['DBSubnetGroup']['VpcId'],
        print_vpc_sgs(instance['VpcSecurityGroups']),
        print_bool(instance['AutoMinorVersionUpgrade']),
        'Public' if instance['PubliclyAccessible'] == True else 'Private',      
        '%s:%s' % (instance['Endpoint']['Address'], instance['Endpoint']['Port']),
        str(instance['BackupRetentionPeriod'])
        ])
    else:
      rows.append([
        instance['DBInstanceIdentifier'], 
        instance['DBSubnetGroup']['DBSubnetGroupName'],
        instance['DBInstanceClass'], 
        '%s %s' % (instance['Engine'], instance['EngineVersion']), 
        instance['DBInstanceStatus'],
        print_bool(instance['MultiAZ']),
        instance['DBSubnetGroup']['VpcId'],
        'Public' if instance['PubliclyAccessible'] == True else 'Private',      
        ])

  rows = sorted(rows, key=lambda p: p[0])

  if not summary:
    if short is False:
      rows.insert(0, ['DB Identifier', 'Subnet group', 'Type', 'Storage', 'Engine', 'Status', 'AZs (1st, 2nd)', 'MultiAZ', 'Encrypted', 'VpcId', 'SG(s)', 'MinorUpdate', 'Scope', 'Endpoint', 'Backup'])
    else:
      rows.insert(0, ['DB Identifier', 'Subnet group', 'Type', 'Engine', 'Status', 'MultiAZ', 'VpcId', 'Scope'])
  else:
    print("Number of Db instances: %d, total GB: %s. This value includes replicas (i.e. MultiAZ)." % (sum_instances, sum_storage))
    return []

  return rows


def main(argv):
    region = 'us-east-1'
    short = False
    summary = False
    
    try:
      opts, args = getopt.getopt(argv, "r:sc")

      for opt, arg in opts:
          if opt in('-r'):
            region = REGIONS.get(arg, "us-east-1")            
          if opt in ('-s'):
            short = True
          if opt in ('-c'):
            summary = True
    except getopt.GetoptError as err:
      print(err, file=sys.stderr)
      sys.exit(2)

    print("Region: " + region)
    client = boto3.client('rds', region_name=region)
    print_table(print_instances(get_rds_instances(client), short=short, summary=summary))


if __name__ == "__main__":
    main(sys.argv[1:])
