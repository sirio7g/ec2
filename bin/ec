#!/usr/bin/env python

import os
import sys
import getopt
from sys import stderr
import boto3


REGIONS = {
  "tokyo": "ap-northeast-1",
  "mumbai": "ap-south-1",
  "us-east": "us-east-1",
  "dublin": "eu-west-1",
  "singapore": "ap-southeast-1",
  "sydney": "ap-southeast-2",  
  "canada": "ca-central-1",
  "oregon": "us-west-2",
  "frankfurt": "eu-central-1",  
  "california": "us-west-1",
  "brazil": "sa-east-1",
  "south-africa": "af-south-1",
  "ohio": "us-east-2",
  "jakarta": "ap-southeast-3",
  "stockholm": "eu-north-1"  
}

def print_bool(bool_value):
  return 'Yes' if bool_value == True else 'No'


def print_sg(sg_list):
  sg_found = []
  for sg in sg_list:
    sg_found.append(sg['SecurityGroupId'])
  return ','.join(sg_found)


# get instance detailed information
def get_cache_instances(client):
  clusters = []
  paginator = client.get_paginator('describe_cache_clusters')
  #operation_parameters = {'ShowCacheNodeInfo': True, 'ShowCacheClustersNotInReplicationGroups': True}
  page_iterator = paginator.paginate()
  for page in page_iterator:
    clusters = clusters + page['CacheClusters']

  return clusters


# print instance info as table
def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print(row_format.format(*row))


def print_instances(instances_list, short=False):
  rows = []

  for instance in instances_list:
    if short is False:
      rows.append([
        instance.get('CacheClusterId'), 
        instance.get('CacheSubnetGroupName'),
        instance.get('CacheNodeType'), 
        str(instance.get('NumCacheNodes')),         
        '%s %s' % (instance.get('Engine'), instance.get('EngineVersion')), 
        instance.get('CacheClusterStatus'),
        instance.get('PreferredAvailabilityZone'),
        instance['CacheParameterGroup']['CacheParameterGroupName'] if instance.get('CacheParameterGroup', None) is not None else '',
        print_sg(instance.get('SecurityGroups')),
        instance.get('PreferredMaintenanceWindow')
        ])
    else:
      rows.append([
        instance.get('CacheClusterId'), 
        instance.get('CacheSubnetGroupName'),
        instance.get('CacheNodeType'), 
        str(instance.get('NumCacheNodes')),         
        '%s %s' % (instance.get('Engine'), instance.get('EngineVersion'))
        ])


  rows = sorted(rows, key=lambda p: p[0])

  if short is False:
    rows.insert(0, ['Cache Cluster Id', 'Subnet group', 'Type', 'Nodes', 'Engine', 'Status', 'AZ', 'Param group', 'Security Groups', 'Maintenance'])
  else:
    rows.insert(0, ['Cache Cluster Id', 'Subnet group', 'Type', 'Nodes', 'Engine'])    

  return rows


# parse given parameters
def main(argv):
    region = 'us-east-1'
    short = False
    
    try:
      opts, args = getopt.getopt(argv, "r:s")

      for opt, arg in opts:
          if opt in('-r'):
            if arg == "all":
              region = "all"
            elif arg != "":
              region = REGIONS.get(arg, "us-east-1")
            else:
              region = "us-east-1"
          if opt in ('-s'):
            short = True
    except getopt.GetoptError as err:
      print(err, file=sys.stderr)
      sys.exit(2)

    if region == "all":
      for region_name in REGIONS.values():
        print("Region: " + region_name)    
        client = boto3.client('elasticache', region_name=region_name)
        print_table(print_instances(get_cache_instances(client), short=short))
    else:
      print("Region: " + region)    
      client = boto3.client('elasticache', region_name=region)
      print_table(print_instances(get_cache_instances(client), short=short))



# run program
if __name__ == "__main__":
    main(sys.argv[1:])
