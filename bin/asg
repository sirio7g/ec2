#!/usr/bin/env python

import os
import sys
import getopt
from sys import stderr
import boto3

REGIONS = {
  "tokyo": "ap-northeast-1",
  "mumbai": "ap-south-1",
  "us-east": "us-east-1",
  "dublin": "eu-west-1",
  "singapore": "ap-southeast-1",
  "sydney": "ap-southeast-2",  
  "canada": "ca-central-1",
  "oregon": "us-west-2",
  "frankfurt": "eu-central-1",  
  "california": "us-west-1",
  "brazil": "sa-east-1",
  "ohio": "us-east-2",
  "south-africa": "af-south-1"
}

def print_bool(bool_value):
  return 'Yes' if bool_value == True else 'No'


def get_supended_process(processes):
  processes_list = []
  if processes is not None:
    for process in processes:
      processes_list.append(process['ProcessName'])
  return ', '.join(processes_list)


def get_current_instances(instances):
  unhealthy = 0
  if instances is not None:
    for instance in instances:
      if instance['HealthStatus'] == 'Unhealthy':
        unhealthy += 1
    return str(len(instances)) if unhealthy == 0 else "%s (%s unhealthy)" % (len(instances), unhealthy)
  else:
    return '0'


def get_asgs(client, asg_name):
  asgs = []
  paginator = client.get_paginator('describe_auto_scaling_groups')
  page_iterator = paginator.paginate() if asg_name is None else paginator.paginate(AutoScalingGroupNames=[asg_name])
  for page in page_iterator:
    asgs = asgs + page['AutoScalingGroups']

  return asgs


# print instance info as table
def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print(row_format.format(*row))


def print_asg_detail(asgs):
  asg = asgs.pop()

  rows = [
    ["Name", f"{asg['AutoScalingGroupName']}"],
    ["Current size", f"{get_current_instances(asg.get('Instances', []))}"],  
    ["Min size", f"{asg.get('MinSize')}"],  
    ["Desired capacity", f"{asg.get('DesiredCapacity')}"],    
    ["Max size", f"{asg.get('MaxSize')}"],      
    ["Cooldown period", f"{asg.get('DefaultCooldown')}"],      
    ["Healthcheck type", f"{asg.get('HealthCheckType')}"],        
    ["AZs", f"{', '.join(asg.get('AvailabilityZones'))}"],
    ["ELBs", f"{', '.join(asg.get('LoadBalancerNames', ['n/a']))}"],
    ["Target groups", f"{', '.join(asg.get('TargetGroupARNs', ['n/a']))}"],
    ["Suspended processes", f"{get_supended_process(asg.get('SuspendedProcesses', ['n/a']))}"]
  ]
  rows.insert(0, ["Property", "Value"])
  print_table(rows)


  print("\nInstances:")
  instances = []
  for instance in asg.get('Instances'):
    instances.append([
      instance['InstanceId'],
      instance['AvailabilityZone'],
      instance['HealthStatus'],
      instance['LifecycleState']
    ])
  instances.insert(0, ["Instance ID", "AZs", "Health Status", "Lifecycle Status"])
  print_table(instances)


def print_asgs(instances_list, short=False):
  rows = []

  for instance in instances_list:
    if short is False:
      rows.append([
        instance.get('AutoScalingGroupName'), 
        get_current_instances(instance.get('Instances')),
        str(instance.get('MinSize')),
        str(instance.get('DesiredCapacity')), 
        str(instance.get('MaxSize')),         
        str(instance.get('DefaultCooldown')), 
        instance.get('HealthCheckType'),
        ','.join(instance.get('AvailabilityZones')),
        get_supended_process(instance.get('SuspendedProcesses', None))
        ])

  rows = sorted(rows, key=lambda p: p[0])

  if short is False:
    rows.insert(0, ['Name', 'Current', 'Min', 'Desired', 'Max', 'Cooldown', 'Healthcheck', 'AZs', 'Sospended'])

  return rows


# parse given parameters
def main(argv):
    region = 'us-east-1'
    short = False
    asg_name = None
    
    try:
      opts, args = getopt.getopt(argv, "r:sa:h")

      for opt, arg in opts:
        if opt in('-r'):
          region = REGIONS.get(arg, "us-east-1")
        if opt in ('-s'):
          short = True
        if opt in ('-a'):
          asg_name = arg
        if opt in ('-h', '--help'):
          print(f"Usage: asg [-r region] [-a autoscaling group name]")
          sys.exit(0)
    except getopt.GetoptError as err:
      print(err, file=sys.stderr)
      sys.exit(2)

    print("Region: " + region)
    client = boto3.client('autoscaling', region_name=region)

    if asg_name is None:
      print_table(print_asgs(get_asgs(client, asg_name), short=short))
    else:
      print_asg_detail(get_asgs(client, asg_name))
      


# run program
if __name__ == "__main__":
    main(sys.argv[1:])
