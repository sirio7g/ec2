#!/usr/bin/python

import os
import sys
import getopt
from sys import stderr
import boto3
import collections

nf_power = {
  'nano': 0.25,
  'micro':0.5,
  'small':1,
  'medium':2,
  'large':4,
  'xlarge':8,
  '2xlarge':16,
  '3xlarge':24,
  '4xlarge':32,
  '6xlarge':48,
  '8xlarge':64,
  '9xlarge':72,
  '10xlarge':80,
  '12xlarge':96,
  '16xlarge':128,
  '18xlarge':144,
  '24xlarge':192,
  '32xlarge':256,

  'c5.metal':192,
  'i3.metal':128,
  'r5.metal':192,
  'r5d.metal':192,
  'z1d.metal':96,
  'm5.metal':192,
  'm5d.metal':192
}

def get_nf(i_class, i_size):
  if i_size == 'metal':
    return nf_power['%s.%s' % (i_class, i_size)]
  else:
    return nf_power[i_size]


def print_values(in_use, reserved):
  if in_use == 0 and reserved == 0:
    return '-'
  else:
    return '%d/%d' % (in_use, reserved)


def get_ec2_instances_by_type(client):
  in_use = {}
  paginator = client.get_paginator('describe_instances')
  page_iterator = paginator.paginate() 
  for page in page_iterator:
    for instances in page.get('Reservations'):
      for instance in instances.get('Instances'):        
        if instance.get('State')['Name'] == 'running':
          i_class, i_size = instance.get('InstanceType').split('.')
          if i_class in in_use:
            in_use[i_class][i_size] = in_use[i_class].get(i_size, 0) + 1
            in_use[i_class]['count'] = in_use[i_class].get('count', 0) + 1
          else:
            in_use[i_class] = {i_size: 1, 'NF_used': 0, 'count': 1}
          in_use[i_class]['NF_used'] = in_use[i_class]['NF_used'] + get_nf(i_class, i_size)

  return in_use


def add_reserved_nf_by_class(client, in_use):
  instances_list = client.describe_reserved_instances()
  for instance in instances_list['ReservedInstances']:
    if instance.get('State') == 'active':
        i_class, i_size = instance.get('InstanceType').split('.')
        if i_class in in_use:
          in_use[i_class]['NF_reserved'] = in_use[i_class].get('NF_reserved', 0) + instance.get('InstanceCount') * get_nf(i_class, i_size)          
        else:
          in_use[i_class] = {'NF_reserved': instance.get('InstanceCount') * get_nf(i_class, i_size)}
        in_use[i_class]['r_%s' % i_size] = in_use[i_class].get('r_%s' % i_size, 0) + instance.get('InstanceCount')

  return in_use


def print_summary(instances):
  rows = []
  instance_count = 0
  inuse_count = 0
  reserved_count = 0

  rows.insert(0, ['Class (used/rsvd)', 'n   ', 'm   ', 'S   ', 'M   ', 'L   ', 'XL  ', '2XL ', '3XL ', '4XL ', '6XL ', '8XL ', '9XL ', '10XL', '12XL', '16XL', '18XL', '24XL', '32XL', 'metal', 'NU in use', 'NU reserved', 'NU balance'])
  for name, sizes in instances.items():    
    rows.append([
      name,
      print_values(sizes.get('nano', 0), sizes.get('r_nano', 0)),
      print_values(sizes.get('micro', 0), sizes.get('r_micro', 0)),
      print_values(sizes.get('small', 0), sizes.get('r_small', 0)),
      print_values(sizes.get('medium', 0), sizes.get('r_medium', 0)),
      print_values(sizes.get('large', 0), sizes.get('r_large', 0)),
      print_values(sizes.get('xlarge', 0), sizes.get('r_xlarge', 0)),
      print_values(sizes.get('2xlarge', 0), sizes.get('r_2xlarge', 0)),
      print_values(sizes.get('3xlarge', 0), sizes.get('r_3xlarge', 0)),
      print_values(sizes.get('4xlarge', 0), sizes.get('r_4xlarge', 0)),
      print_values(sizes.get('6xlarge', 0), sizes.get('r_6xlarge', 0)),
      print_values(sizes.get('8xlarge', 0), sizes.get('r_8xlarge', 0)),
      print_values(sizes.get('9xlarge', 0), sizes.get('r_9xlarge', 0)),
      print_values(sizes.get('10xlarge', 0), sizes.get('r_10xlarge', 0)),
      print_values(sizes.get('12xlarge', 0), sizes.get('r_12xlarge', 0)),
      print_values(sizes.get('16xlarge', 0), sizes.get('r_16xlarge', 0)),
      print_values(sizes.get('18xlarge', 0), sizes.get('r_18xlarge', 0)),
      print_values(sizes.get('24xlarge', 0), sizes.get('r_24xlarge', 0)),
      print_values(sizes.get('32xlarge', 0), sizes.get('r_32xlarge', 0)),
      print_values(sizes.get('metal', 0), sizes.get('r_metal', 0)),      
      str(sizes.get('NF_used', 0)),
      str(sizes.get('NF_reserved', 0)),
      "{0:+}".format(sizes.get('NF_used', 0) - sizes.get('NF_reserved', 0))
    ])
    instance_count += sizes.get('count', 0)
    inuse_count += sizes.get('NF_used', 0)
    reserved_count += sizes.get('NF_reserved', 0)

  print_table(rows)
  return (instance_count, inuse_count, reserved_count)


# print instance info as table
def print_table(rows):
  row_format = ''.join(["{:<%s}" % (l + 2) for l in [max([len(r) for r in c]) for c in zip(*rows)]])
  for row in rows:
    print row_format.format(*row)


# parse given parameters
def main(argv):
    region = None
    short = False
    instance_count = 0
    inuse_count = 0
    reserved_count = 0
    
    try:
      opts, args = getopt.getopt(argv, "r:s")

      for opt, arg in opts:
          if opt in('-r'):
            if arg == 'tokyo':
              region = 'ap-northeast-1'
            elif arg == 'mumbai':
              region = 'ap-south-1'
            elif arg == 'us-east':
              region = 'us-east-1'
            elif arg == 'dublin':
              region = 'eu-west-1'
            elif arg == 'singapore':
              region = 'ap-southeast-1'
            elif arg == 'sydney':
              region = 'ap-southeast-2'
            elif arg == 'canada':
              region = 'ca-central-1'
          if opt in ('-s'):
            short = True
    except getopt.GetoptError, err:
      print >>sys.stderr, err
      sys.exit(2)

    if region == None:
      for region_name in ['us-east-1', 'ap-northeast-1', 'eu-west-1', 'ap-southeast-1', 'ca-central-1', 'ap-southeast-2']:
        print("Region: " + region_name)
        client = boto3.client('ec2', region_name=region_name)    
        summary = print_summary(add_reserved_nf_by_class(client, get_ec2_instances_by_type(client)))
        instance_count += summary[0]        
        inuse_count += summary[1]
        reserved_count += summary[2]
        print("")
    else:
        print("Region: " + region)
        client = boto3.client('ec2', region_name=region)    
        summary = print_summary(add_reserved_nf_by_class(client, get_ec2_instances_by_type(client)))
        instance_count += summary[0]        
        inuse_count += summary[1]
        reserved_count += summary[2]
        print("")        

    print("Total: %d instances; %d NU in use; %d NU reserved." % (instance_count, inuse_count, reserved_count))

    print('\nNormalization factors per instance class and size')
    for k, v in sorted(nf_power.items(), key=lambda kv: kv[1]):
      print('%s: %s' % (k, v))

    # if wasted_count > 0:
    #   sys.exit(wasted_count)

# run program
if __name__ == "__main__":
    main(sys.argv[1:])
